{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport axios from 'axios';\n\nimport querystring from 'querystring';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass MyContabo extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'my-contabo',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\t\tconst token = await this.getToken();\n\t\tthis.log.info('huhu ...');\n\t}\n\n\tprivate async getToken(): Promise<string> {\n\t\tlet reponse = '';\n\t\tawait axios\n\t\t\t.post(\n\t\t\t\t'https://auth.contabo.com/auth/realms/contabo/protocol/openid-connect/token',\n\t\t\t\tquerystring.stringify({\n\t\t\t\t\tgrant_type: 'password',\n\t\t\t\t\tclient_id: this.config.clientId,\n\t\t\t\t\tclient_secret: this.config.clientSecret,\n\t\t\t\t\tusername: this.config.apiUser,\n\t\t\t\t\tpassword: this.config.apiPassword,\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t\t.then(({ data }: { data: string }) => {\n\t\t\t\tconst res = typeof data === 'string' ? JSON.parse(data) : data;\n\t\t\t\tthis.loadData(res.access_token);\n\t\t\t\tthis.setState('info.connection', { val: true, ack: true });\n\t\t\t\treponse = res.access_token;\n\t\t\t})\n\t\t\t.catch(function (error: any) {\n\t\t\t\tconsole.error(error); // ...\n\t\t\t\tthis.setState('info.connection', { val: false, ack: true });\n\t\t\t\tthrow new Error('Failed to get token :  ' + error.message);\n\t\t\t});\n\t\treturn reponse;\n\t}\n\n\tprivate loadData(token: string): void {\n\t\tthis.log.info('token : ' + token);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new MyContabo(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new MyContabo())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,mBAAkB;AAElB,yBAAwB;AAKxB,MAAM,kBAAkB,MAAM,QAAQ;AAAA,EAC9B,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,IACP,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AAAA,EAKA,MAAc,UAAyB;AAEtC,UAAM,QAAQ,MAAM,KAAK,SAAS;AAClC,SAAK,IAAI,KAAK,UAAU;AAAA,EACzB;AAAA,EAEA,MAAc,WAA4B;AACzC,QAAI,UAAU;AACd,UAAM,aAAAA,QACJ;AAAA,MACA;AAAA,MACA,mBAAAC,QAAY,UAAU;AAAA,QACrB,YAAY;AAAA,QACZ,WAAW,KAAK,OAAO;AAAA,QACvB,eAAe,KAAK,OAAO;AAAA,QAC3B,UAAU,KAAK,OAAO;AAAA,QACtB,UAAU,KAAK,OAAO;AAAA,MACvB,CAAC;AAAA,MACD;AAAA,QACC,SAAS;AAAA,UACR,gBAAgB;AAAA,QACjB;AAAA,MACD;AAAA,IACD,EACC,KAAK,CAAC,EAAE,KAAK,MAAwB;AACrC,YAAM,MAAM,OAAO,SAAS,WAAW,KAAK,MAAM,IAAI,IAAI;AAC1D,WAAK,SAAS,IAAI,YAAY;AAC9B,WAAK,SAAS,mBAAmB,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC;AACzD,gBAAU,IAAI;AAAA,IACf,CAAC,EACA,MAAM,SAAU,OAAY;AAC5B,cAAQ,MAAM,KAAK;AACnB,WAAK,SAAS,mBAAmB,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAC1D,YAAM,IAAI,MAAM,4BAA4B,MAAM,OAAO;AAAA,IAC1D,CAAC;AACF,WAAO;AAAA,EACR;AAAA,EAEQ,SAAS,OAAqB;AACrC,SAAK,IAAI,KAAK,aAAa,KAAK;AAAA,EACjC;AAAA,EAKQ,SAAS,UAA4B;AAC5C,QAAI;AAOH,eAAS;AAAA,IACV,SAAS,GAAP;AACD,eAAS;AAAA,IACV;AAAA,EACD;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AACjF,QAAI,OAAO;AAEV,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IACvE,OAAO;AAEN,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACpC;AAAA,EACD;AAkBD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,UAAU,OAAO;AAC/F,OAAO;AAEN,GAAC,MAAM,IAAI,UAAU,GAAG;AACzB;",
  "names": ["axios", "querystring"]
}
